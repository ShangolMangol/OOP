Object subclass: #OOPEnum	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP3'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OOPEnum class	instanceVariableNames: 'values lazyInitialization'!!OOPEnum class methodsFor: 'accessing' stamp: 'initialize 5/22/2023 18:38'!lazyInitialization: tempVal		lazyInitialization := tempVal! !!OOPEnum class methodsFor: 'accessing' stamp: 'initialize 5/22/2023 18:35'!values: valArr	values :=valArr! !!OOPEnum class methodsFor: 'compiling' stamp: 'initialize 5/23/2023 16:17'!compile: aSourceCode		| oldDict newDict wrong|		super compile: aSourceCode.		(superclass superclass name = 'OOPEnum') ifTrue: 	[		oldDict := self superclass methodDict.		newDict := self methodDict.		wrong := newDict keys select: [:key| (oldDict includesKey: key) not ].		wrong size = 1 ifTrue: 		[			self removeSelector: (wrong at: 1).			AssertionFailure signal: ((wrong at: 1) asString ), ' does not override a method from ',(self superclass name).		].		] ! !!OOPEnum class methodsFor: 'adding/removing methods' stamp: 'RA 5/23/2023 18:18'!addSwitch	"comment stating purpose of message"	|currentClass methodBody allSet|	(self name = 'OOPEnum') 	ifTrue: [		AssertionFailure signal: 'can''t add switch functionality to non-Enum class ', (self name).	]	ifFalse:[		values do: [:value| self compile: 'do_',value,': aBlock ^false' ].		values do: [:value| 				currentClass := Smalltalk at: ((self name), '_', value, '__') asSymbol.				currentClass compile: 'do_',value,': aBlock aBlock value. ^true'. 			].		methodBody := 'switch_'.		values do: [:value| methodBody := methodBody, 'case_', value, ': ' ,value, 'Block '. ].		values do: [:value| methodBody := methodBody, '( self do_', value , ': ', value, 'Block) | ' ].		methodBody := methodBody, 'false.'.		self compile: methodBody.		allSet := self powerSet: values.		allSet do: [:singleSet| 			((singleSet size = 0) | (singleSet size = values size)) ifFalse: [				methodBody := 'switch_'.				singleSet do: [:value| methodBody := methodBody, 'case_', value, ': ', value, 'Block ' ].								methodBody := methodBody, 'default: defaultBlock ('.				singleSet do: [:value| methodBody := methodBody, '( self do_', value, ': ', value, 'Block) | ' ].				methodBody := methodBody, 'false ) or: defaultBlock'.					self compile: methodBody.				]			]	]! !!OOPEnum class methodsFor: 'adding/removing methods' stamp: 'RA 5/23/2023 17:30'!powerSet: anArray    | element subsets |    anArray isEmpty ifTrue: [^ #(#())].    element := anArray last.    subsets := self powerSet: anArray allButLast.    ^ subsets, (subsets collect: [:each | each , {element}])! !!OOPEnum class methodsFor: 'subclass creation' stamp: 'initialize 5/22/2023 16:55'!subclass: aSubclassName instanceVariableNames: instVarNames classVariableNames: classVarNames poolDictionaries: poolDictionaries category: aCategory	"comment stating purpose of message"	AssertionFailure signal: 'You must specify ', aSubclassName, '''s values'! !!OOPEnum class methodsFor: 'subclass creation' stamp: 'initialize 5/23/2023 14:48'!subclass: aSubclassName values: valuesArr lazyInitialization: isLazy initialize: initializeAsString instanceVariableNames: instVarNamesclassVariableNames: classVarNames poolDictionaries: poolDictionaries category: aCategoryName	| derived valString tempClass|		(self name = 'OOPEnum') ifFalse: [self name, ' is final!! It can''t be inherited'].	derived := (ClassBuilder new)		superclass: self		subclass: aSubclassName		instanceVariableNames: instVarNames		classVariableNames: classVarNames		poolDictionaries: poolDictionaries		category: aCategoryName.		derived values: valuesArr.	derived lazyInitialization: isLazy.		valString := valuesArr inject: '' into: [:a :c | a,' ', c].  		derived class instanceVariableNames: valString.		derived compile: initializeAsString.		valuesArr do: 		[:value | tempClass := (ClassBuilder new)			superclass: derived			subclass: (aSubclassName, '_', value, '__') asSymbol			instanceVariableNames: ''			classVariableNames: ''			poolDictionaries: ''			category: aCategoryName. 						derived class compile: value,': val ', value, ':= val.'.			derived class compile: value, ' (', value,' isNil) ifTrue: [',value,':=' ,tempClass name ,' basicNew initialize.]. ^',value.												isLazy ifFalse: [derived perform: ((value,':') asSymbol) with: tempClass basicNew initialize.].								].			^derived	! !!OOPEnum class methodsFor: 'instance creation' stamp: 'initialize 5/22/2023 17:55'!new	"comment stating purpose of message"		AssertionFailure signal: 'You can''t create an instance of ',self name.! !