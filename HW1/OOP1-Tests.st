TestCase subclass: #MonomTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1-Tests'!!MonomTest methodsFor: 'testing' stamp: 'AR 4/8/2023 16:42'!testCreating	|monom|	monom := Monom new.	self assert: (monom exp = 0).	monom exp: 5.	self assert: (monom exp = 5).	self should:  [monom exp: -1] raise: (Error).	self should:  [monom exp: 'a'] raise: (Error).		self assert: (monom coef = 0).	monom coef: -1.	self assert: (monom coef = -1).	self should: [monom coef: 'a'] raise: (Error).! !!MonomTest methodsFor: 'testing' stamp: 'AR 4/8/2023 16:43'!testDerivative	|monomB|	monomB := Monom new.		monomB exp: 1.	monomB coef: -5.	self assert:  (monomB derivative coef = -5).	self assert:  (monomB derivative exp = 0).		monomB exp: 4.	monomB coef: -4.	self assert:  (monomB derivative coef = -16).	self assert:  (monomB derivative exp = 3).		monomB exp: 0.	monomB coef: 20.	self assert:  (monomB derivative coef = 0).	self assert:  (monomB derivative exp = 0).! !TestCase subclass: #PolyStreamTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1-Tests'!!PolyStreamTest methodsFor: 'testing' stamp: 'initialize 4/9/2023 12:59'!testAdd	|pol1 pol2 pol3|	pol1 := PolyStream new.	pol2 := PolyStream new.	pol3 := PolyStream new.		self should: [ pol1 add: 2] raise: Error. "must be polystream"		pol1 addCoef: 2 withExp: 3.	pol1 addCoef: 1 withExp: 2.		pol2 addCoef: 1 withExp: 3.	pol2 addCoef: 2 withExp: 2.		pol1 add: pol2.	self assert: ((pol1 eval: 3) = 108).	self assert: ((pol1 eval: -1) = 0).		pol3 addCoef: 3 withExp: 1.	pol3 addCoef: 2 withExp: 2.	pol3 multiplyBy: 3.	pol3 substitute: 2.		pol3 add: pol1.	self assert: ((pol3 eval: 3) = 378).! !!PolyStreamTest methodsFor: 'testing' stamp: 'initialize 4/9/2023 12:28'!testAddCoefWithExp	| pol |	pol := PolyStream new.		self should: [ pol addCoef: 'a' withExp: 3] raise: Error. "must be monom"	self should: [ pol addCoef: 2 withExp: 'a'] raise: Error. "must be monom"	self should: [ pol addCoef: 2 withExp: -1] raise: Error. "must be monom"			pol addCoef: 0 withExp: 3.	self assert: ((pol eval: 4 ) = 0). "shouldnt save monom with zero coef"			pol addCoef: 2 withExp: 3.	self assert: ((pol eval: 4 ) = 128).		pol addCoef: 2 withExp: 3.	self assert: ((pol eval: 4 ) = 256).		pol addCoef: 0 withExp: 2.	self assert: ((pol eval: 4 ) = 256).		pol addCoef: 5 withExp: 1.	self assert: ((pol eval: 4 ) = 276).		pol addCoef: 4 withExp: 0.	self assert: ((pol eval: 4 ) = 280).		pol addCoef: 7 withExp: 6.	self assert: ((pol eval: 4 ) = 28952).	! !!PolyStreamTest methodsFor: 'testing' stamp: 'initialize 4/9/2023 12:16'!testCreating	|poly|	poly := PolyStream new.	self assert: ((poly eval: 3)=0).	self assert: ((poly eval: 1)=0).	self assert: ((poly eval: -1)=0).	self assert: ((poly eval: 0)=0).! !!PolyStreamTest methodsFor: 'testing' stamp: 'initialize 4/9/2023 13:14'!testFilter	|p s|		p := PolyStream new.	self assert: ((p eval: 3)=0).		p addCoef: 3 withExp: 2.	self assert: ((p eval: 3)=27).		p addCoef: 2 withExp: 3.	self assert: ((p eval: 3)=81).	s := Set with: 2.	p filter: s.	self assert: ((p eval: 3)=54).	s add: 3.	self assert: ((p eval: 3)=54).	p addCoef: 4 withExp: 2.	self assert: ((p eval: 3)=90).	p substitute: 2.	self assert: ((p eval: 3)=576).	p addCoef: 3 withExp: 5.	self assert: ((p eval: 3)=1305).	p multiplyBy: 5.	self assert: ((p eval: 3)=6525).	p addCoef: 2 withExp: 1.	self assert: ((p eval: 3)=6531).	p addCoef: 2 withExp: 0.	self assert: ((p eval: 3)=6533).	p addCoef: 0 withExp: 3.	self assert: ((p eval: 3)=6533).	s add: 1; add: 2; add: 3; add: 5.	p filter: s.	self assert: ((p eval: 3)=2).	! !!PolyStreamTest methodsFor: 'testing' stamp: 'initialize 4/9/2023 12:40'!testMultiplyBy	| pol |	pol := PolyStream new.		self should: [ pol multiplyBy: 'a'] raise: Error. "must be int"	self should: [ pol multiplyBy: 1.5] raise: Error. "must be int"		pol multiplyBy: 3.	self assert: ((pol eval: 3)=0).		pol addCoef: 2 withExp: 3.	pol addCoef: 6 withExp: 2.	pol addCoef: 3 withExp: 1.	pol addCoef: 5 withExp: 0.	self assert: ((pol eval: 3)=122).	self assert: ((pol eval: 0)=5).		pol multiplyBy: 2.	self assert: ((pol eval: 3)=244).		pol multiplyBy: 5.	self assert: ((pol eval: 3)=1220).		pol multiplyBy: -2.	self assert: ((pol eval: 3)= -2440).		pol multiplyBy: 0.	self assert: ((pol eval: 3)=0).			! !!PolyStreamTest methodsFor: 'testing' stamp: 'initialize 4/9/2023 12:47'!testSubstitute	| pol |		pol := PolyStream new.		self should: [ pol substitute: 'a'] raise: Error. "must be int"	self should: [ pol substitute: 1.5] raise: Error. "must be int"		pol substitute: 3.	self assert: ((pol eval: 3)=0).		pol addCoef: 2 withExp: 3.	pol addCoef: 6 withExp: 2.	pol addCoef: 3 withExp: 1.	pol addCoef: 5 withExp: 0.	self assert: ((pol eval: 3)=122).	self assert: ((pol eval: 0)=5).		pol substitute: 2.	self assert: ((pol eval: 3)=671).		pol substitute: 5.	self assert: ((pol eval: 3)=59495).		pol substitute: -2.	self assert: ((pol eval: 3)= -410575).		self should: [ pol substitute: 0] raise: Error.		! !TestCase subclass: #PolyTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1-Tests'!!PolyTest methodsFor: 'testing' stamp: 'AR 4/8/2023 21:54'!testAdd	|monom poly1 poly2 poly3 dict|	poly1 := Polynom new.	poly2 := Polynom new.	monom := Monom new.		self should: [poly1 add: monom] raise: Error.		monom exp: 1.	monom coef: -5.	poly1 addMonom: monom.		monom exp: 4.	monom coef: -4.	poly1 addMonom: monom.		monom exp: 0.	monom coef: 20.	poly1 addMonom: monom.		monom exp: 1.	monom coef: 8.	poly2 addMonom: monom.		monom exp: 4.	monom coef: 6.	poly2 addMonom: monom.		monom exp: 2.	monom coef: 15.	poly2 addMonom: monom.		poly3 := poly2 add: poly1.	dict := poly3 asDictionary. 	self assert: (dict at: 0) = 20.	self assert: (dict at: 1) = 3. "regular add"	self assert: (dict at: 2) = 15. 	self assert: (dict at: 4) = 2.	dict removeKey: 0; removeKey: 1; removeKey: 2; removeKey: 4.	self assert: (dict isEmpty).

	poly3 := poly1 add: poly2.	dict := poly3 asDictionary. 	self assert: (dict at: 0) = 20.	self assert: (dict at: 1) = 3. "comotative"	self assert: (dict at: 2) = 15. 	self assert: (dict at: 4) = 2.	dict removeKey: 0; removeKey: 1; removeKey: 2; removeKey: 4.	self assert: (dict isEmpty).		monom exp: 7; coef: 5.	poly1 addMonom: monom.	poly2 addMonom: monom.	dict := poly3 asDictionary. 	self assert: (dict at: 0) = 20.	self assert: (dict at: 1) = 3. "not affected by changes to poly"	self assert: (dict at: 2) = 15. 	self assert: (dict at: 4) = 2.	dict removeKey: 0; removeKey: 1; removeKey: 2; removeKey: 4.	self assert: (dict isEmpty).		poly1 := Polynom new.	poly3 := poly3 add: poly1.	dict := poly3 asDictionary. 	self assert: (dict at: 0) = 20.	self assert: (dict at: 1) = 3. "not affected by changes to poly"	self assert: (dict at: 2) = 15. 	self assert: (dict at: 4) = 2.	dict removeKey: 0; removeKey: 1; removeKey: 2; removeKey: 4.	self assert: (dict isEmpty).							! !!PolyTest methodsFor: 'testing' stamp: 'AR 4/8/2023 20:10'!testAddMonom	| pol mon dict|	pol := Polynom new.	self assert: (pol asDictionary isEmpty).		self should: [ pol addMonom: 'a'] raise: Error. "must be monom"		mon := Monom new.	pol addMonom: mon.	self assert: (pol asDictionary isEmpty). "shouldnt save monom with zero coef"		mon exp: 3.	pol addMonom: mon.	self assert: (pol asDictionary isEmpty). "shouldnt save monom with zero coef"		mon coef: 4.	self assert: (pol asDictionary isEmpty). "changing monom shouldn't effect pol"		pol addMonom: mon.	dict := pol asDictionary.	self assert: (dict at: 3) = 4. "adding normal monom"	dict removeKey: 3.	self assert: (dict isEmpty).		mon coef: 5.  	mon exp: 4.
	pol addMonom: mon.	dict := pol asDictionary. 	self assert: (dict at: 3) = 4. "adding another monom"	self assert: (dict at: 4) = 5.	dict removeKey: 3; removeKey: 4.	self assert: (dict isEmpty).  		mon coef: 3.  	pol addMonom: mon.	dict := pol asDictionary. 	self assert: (dict at: 3) = 4. "adding same monom"	self assert: (dict at: 4) = 8.	dict removeKey: 3; removeKey: 4.	self assert: (dict isEmpty).  		mon coef: 5.  	dict := pol asDictionary. 	self assert: (dict at: 3) = 4. "changing monom shouldnt effect the polinom"	self assert: (dict at: 4) = 8.	dict removeKey: 3; removeKey: 4.	self assert: (dict isEmpty).  		mon coef: 0.  	pol addMonom: mon.	dict := pol asDictionary. 	self assert: (dict at: 3) = 4. "shouldnt save monom with zero coef"	self assert: (dict at: 4) = 8.	dict removeKey: 3; removeKey: 4.	self assert: (dict isEmpty).  		mon coef: 11.  	mon exp: 0.  	pol addMonom: mon.	dict := pol asDictionary. 	self assert: (dict at: 0) = 11.	self assert: (dict at: 3) = 4. "shouldnt save monom with zero exp"	self assert: (dict at: 4) = 8.	dict removeKey: 3; removeKey: 4; removeKey: 0.	self assert: (dict isEmpty).  			! !!PolyTest methodsFor: 'testing' stamp: 'AR 4/8/2023 16:47'!testCreating 	| pol |	pol := Polynom new.	self assert: (pol asDictionary isEmpty)	! !!PolyTest methodsFor: 'testing' stamp: 'AR 4/8/2023 21:11'!testDerivative	|monom poly dict|	poly := Polynom new.	monom := Monom new.		monom exp: 1.	monom coef: -5.	poly addMonom: monom.		monom exp: 4.	monom coef: -4.	poly addMonom: monom.		monom exp: 0.	monom coef: 20.	poly addMonom: monom.		dict := (poly derivative) asDictionary.		self assert: (dict at: 0) = -5.	self assert: (dict at: 3) = -16.	dict removeKey: 3; removeKey: 0.	self assert: dict isEmpty.		poly := Polynom new.	poly addMonom: monom.	self assert: poly derivative asDictionary isEmpty.	! !!PolyTest methodsFor: 'testing' stamp: 'AR 4/8/2023 21:50'!testEval	|monom poly|	poly := Polynom new.	monom := Monom new.		monom exp: 1.	monom coef: -5.	poly addMonom: monom.		self should: [poly eval: 'a'] raise: Error.	self assert: (poly eval: 2) = -10.	self assert: (poly eval: 1) = -5.	self assert: (poly eval: 0) = 0.	self assert: (poly eval: -1) = 5.	self assert: (poly eval: -2) = 10.			monom exp: 4.	monom coef: -4.	poly addMonom: monom.			self assert: (poly eval: 2) = -74.	self assert: (poly eval: 1) = -9.	self assert: (poly eval: 0) = 0.	self assert: (poly eval: -1) = 1.	self assert: (poly eval: -2) = -54.		monom exp: 0.	monom coef: 20.	poly addMonom: monom.			self assert: (poly eval: 2) = -54.	self assert: (poly eval: 1) = 11.	self assert: (poly eval: 0) = 20.	self assert: (poly eval: -1) = 21.	self assert: (poly eval: -2) = -34.! !!PolyTest methodsFor: 'testing' stamp: 'AR 4/8/2023 21:04'!testMultMonom	| pol mon dict|	pol := Polynom new.		mon := Monom new.	mon exp: 3.	mon coef: 4.	pol addMonom: mon.	mon exp: 2.	mon coef: 5.	pol addMonom: mon.	mon exp: 4.	mon coef: 3.		self should: [pol multiplyByMonom: 'a'] raise: Error. "multiplyByMonom only monom"		pol multiplyByMonom: mon. "multiply regular monom"	dict := pol asDictionary.	self assert: (dict at: 7) = 12.	self assert: (dict at: 6) = 15.	dict removeKey: 7; removeKey: 6.	self assert: dict isEmpty.		mon exp: 0.	mon coef: -10.		dict := pol asDictionary. "monom changes should affect polinom"	self assert: (dict at: 7) = 12.	self assert: (dict at: 6) = 15.	dict removeKey: 7; removeKey: 6.	self assert: dict isEmpty.		pol multiplyByMonom: mon. "multiply monom with zero exp"	dict := pol asDictionary.	self assert: (dict at: 7) = -120.	self assert: (dict at: 6) = -150.	dict removeKey: 7; removeKey: 6.	self assert: dict isEmpty.		mon coef: 0.	mon exp: 4.	pol multiplyByMonom: mon. "multiply monom with zero coef"	dict := pol asDictionary.	self assert: dict isEmpty! !