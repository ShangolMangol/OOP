Object subclass: #Monom	instanceVariableNames: 'exp coef'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Monom methodsFor: 'accessing' stamp: 'AR 4/7/2023 14:54'!coef	^coef! !!Monom methodsFor: 'accessing' stamp: 'AR 4/7/2023 14:57'!coef: anInteger	(anInteger isKindOf: Integer)	ifTrue: [coef := anInteger ]	ifFalse: [self error: 'invalid input']! !!Monom methodsFor: 'accessing' stamp: 'AR 4/7/2023 14:30'!exp	^exp! !!Monom methodsFor: 'accessing' stamp: 'AR 4/7/2023 14:53'!exp: anInteger		((anInteger isKindOf: Integer) and: [anInteger >= 0] )	ifTrue: [exp := anInteger] 	ifFalse: [self error: 'invalid input']	! !!Monom methodsFor: 'actions' stamp: 'AR 4/7/2023 15:16'!derivative	|result|	result:= Monom new.	(exp > 0 ) 	ifTrue:		 [					result coef: coef*exp.				result exp: exp - 1		].	^result	! !!Monom methodsFor: 'initialize-release' stamp: 'AR 4/7/2023 14:11'!initialize	exp:=0.	coef:=0.! !Object subclass: #Polynom	instanceVariableNames: 'monoms'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Polynom methodsFor: 'initialize-release' stamp: 'initialize 4/7/2023 15:34'!initialize	monoms := Dictionary new.! !!Polynom methodsFor: 'accessing' stamp: 'initialize 4/7/2023 16:12'!asDictionary	|resultDict|	resultDict := Dictionary new.	monoms do: [:monom | resultDict add: (monom exp) -> (monom coef) ].	^resultDict		! !!Polynom methodsFor: 'actions' stamp: 'initialize 4/7/2023 17:46'!add: aPolynom	|resultPoly tempMonom|			(aPolynom isKindOf: Polynom)	ifTrue:	[		resultPoly := Polynom new.		tempMonom := Monom new.		monoms do: [:monom | resultPoly addMonom: monom].		aPolynom asDictionary keysAndValuesDo: [:exp :coef | 					tempMonom exp: exp.					tempMonom coef: coef.					resultPoly addMonom: tempMonom].		^resultPoly	]	ifFalse: [self error: 'invalid input'].	! !!Polynom methodsFor: 'actions' stamp: 'initialize 4/7/2023 16:51'!derivative		| resultPoly |	resultPoly := Polynom new.	monoms do: [:monom | resultPoly addMonom: monom derivative].	^resultPoly! !!Polynom methodsFor: 'actions' stamp: 'initialize 4/7/2023 17:36'!eval: anInteger		(anInteger isKindOf: Integer)	ifTrue:	[		^(monoms inject: 0 into: [:sum :element | 			sum + ((element coef) * (anInteger raisedToInteger: (element exp) )) ])	]	ifFalse: [self error: 'invalid input'].	! !!Polynom methodsFor: 'updating' stamp: 'initialize 4/7/2023 16:19'!addMonom: aMonom	|temp|		(aMonom isKindOf: Monom) 	ifTrue: 	[			((aMonom coef = 0 ) not)			ifTrue: 			[					temp := monoms at: aMonom exp ifAbsent: [Monom new. ].
				temp exp: aMonom exp.
				temp coef: temp coef + aMonom coef.				monoms add: (temp exp) -> temp.			]					] 	ifFalse: [self error: 'invalid input'].							! !!Polynom methodsFor: 'updating' stamp: 'initialize 4/7/2023 16:56'!multiplyByMonom: aMonom	|tempDict|	(aMonom isKindOf: Monom) 	ifTrue: 	[		tempDict := monoms.		monoms := Dictionary new.		tempDict do: 			[:currentMonom | 				currentMonom exp: (currentMonom exp + aMonom exp).				currentMonom coef: (currentMonom coef * aMonom coef).				self addMonom: currentMonom.			].		] 	ifFalse: [self error: 'invalid input'].		! !